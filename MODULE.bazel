module(name = "rules_wasm")

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_rust", version = "0.49.3")

bazel_dep(name = "buildifier_prebuilt", version = "7.3.1", dev_dependency = True, repo_name = "buildtools")

register_toolchains("//:wasm32-wasi-toolchain")

# Version for WASI interface definitions: https://github.com/WebAssembly/WASI/releases.
wasi_version = "0.2.1"

# Version for wasmtime: https://github.com/bytecodealliance/wasmtime/releases
wasmtime_version = "24.0.0"

# Version for `wasm-tools`: https://github.com/bytecodealliance/wasm-tools/releases.
wasm_tools_version = "1.217.0"

# Version for `wit-bindgen`: https://github.com/bytecodealliance/wit-bindgen/releases.
wit_bindgen_version = "0.32.0"

# Supported execution platforms for pre-built binaries.
# TODO: Figure out how to dedupe this list with `private.bzl`.
execution_platforms = [
    "aarch64-linux",
    "aarch64-macos",
    "x86_64-linux",
    "x86_64-macos",
]

# Rust setup: wit-bindgen-generated Rust files depend on the wit-bindgen crate.
crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.spec(
    package = "wit-bindgen",
    version = wit_bindgen_version,
)
crate.from_specs()
use_repo(crate, "crates")

# Manually download prebuilt binaries for various dependencies:

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

# WASI interface definitions.
http_archive(
    name = "wasi",
    build_file_content = """
load(":wasm.bzl", "wasi_packages")

[filegroup(
    name = package,
    srcs = glob(["WASI-{version}/wasip2/" + package + "/*.wit"]),
    visibility = ["//visibility:public"],
) for package in wasi_packages.keys()]
""".format(version = wasi_version),
    integrity = "sha384-7kxa+SG+M43Wv9RkO/WrRghhN55JBWl9VOl/qgqo3X3673e4KipKJl3wMqp3oFSK",
    patch_args = [],
    # By abusing `cat` as a "patch" tool,
    # we simply copy the "patch" file into the root of the archive.
    # This hack involves hardwiring the file name in multiple places :/.
    # Ideally there would be something like `remote_file_urls` for local files.
    # Copying this file allows us to keep a single source of truth
    # for the set of WASI package names.
    patch_tool = "cat > wasm.bzl",
    patches = [":wasm.bzl"],
    url = "https://github.com/WebAssembly/WASI/archive/refs/tags/v{version}.tar.gz"
        .format(version = wasi_version),
)

[http_archive(
    name = "wasmtime-" + exe_platform,
    build_file_content = """
alias(
    name = "wasmtime",
    actual = "wasmtime-v{version}-{platform}/wasmtime",
    visibility = ["//visibility:public"],
)
""".format(
        platform = exe_platform,
        version = wasmtime_version,
    ),
    integrity = "sha384-4JX5ScczhNYkRvPmZVnND8CnZkavJqpBagfEgnRCFIw+G63AiuXPfrtLioxmW2YR",
    url = "https://github.com/bytecodealliance/wasmtime/releases/download/v{version}/wasmtime-v{version}-{platform}.tar.xz".format(
        platform = exe_platform,
        version = wasmtime_version,
    ),
) for exe_platform in execution_platforms]

[http_archive(
    name = "wasm-tools-" + exe_platform,
    build_file_content = """
alias(
    name = "wasm-tools",
    actual = "wasm-tools-{version}-{platform}/wasm-tools",
    visibility = ["//visibility:public"],
)
""".format(
        platform = exe_platform,
        version = wasm_tools_version,
    ),
    integrity = "sha384-vb69rPMRE7x1VjAWm6CmyxWgwVFNSY0sPvkqIk3WMrI9lWXXPFXOWfc4JFCkYfBS",
    url = "https://github.com/bytecodealliance/wasm-tools/releases/download/v{version}/wasm-tools-{version}-{platform}.tar.gz"
        .format(
        platform = exe_platform,
        version = wasm_tools_version,
    ),
) for exe_platform in execution_platforms]

[http_archive(
    name = "wit-bindgen-" + exe_platform,
    build_file_content = """
alias(
    name = "wit-bindgen",
    actual = "wit-bindgen-{version}-{platform}/wit-bindgen",
    visibility = ["//visibility:public"],
)
""".format(
        platform = exe_platform,
        version = wit_bindgen_version,
    ),
    integrity = "sha384-EUtCHgZeCGY+W9VX/p8tMGC6R9UjerTpuLRyPXMcOHsGoG3OQwuXOUsulfVrFaiy",
    url = "https://github.com/bytecodealliance/wit-bindgen/releases/download/v{version}/wit-bindgen-{version}-{platform}.tar.gz"
        .format(
        platform = exe_platform,
        version = wit_bindgen_version,
    ),
) for exe_platform in execution_platforms]

http_file(
    name = "libwit-bindgen-cabi-realloc",
    integrity = "sha384-p6B7cM+5whsc1zqAKpr0DyQx1d5RLPmXkdmys8hUQiLI678qXTJA2zvLpomLTknD",
    url = "https://github.com/bytecodealliance/wit-bindgen/raw/v{version}/crates/guest-rust/rt/src/libwit_bindgen_cabi_realloc.a"
        .format(version = wit_bindgen_version),
)

# Temporary crutch until we can build against wasip2 directly.
http_file(
    name = "wasi-snapshot-preview1-reactor",
    integrity = "sha384-u3TvoxreZTa86exGH3q3WVcW972rnRfzX53gDqwoIjPnnwCPy0E9y/AFIQRjHl/S",
    url = "https://github.com/bytecodealliance/wasmtime/releases/download/v{version}/wasi_snapshot_preview1.reactor.wasm"
        .format(version = wasmtime_version),
)
