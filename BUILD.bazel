load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@buildtools//:rules.bzl", "buildifier")
load(":wasi-toolchain-config.bzl", "wasi_toolchain_config")

# To format all Bazel files, run `bazel run //:buildifier`.
buildifier(
    name = "buildifier",
    exclude_patterns = [
        "./.git/*",
    ],
    lint_mode = "fix",
    mode = "fix",
)

# Rename the manually-downloaded `realloc` library, as per
# https://github.com/bytecodealliance/wit-bindgen/blob/v0.30.0/crates/guest-rust/rt/build.rs#L27.
copy_file(
    name = "libwit-bindgen-cabi-realloc",
    src = "@libwit-bindgen-cabi-realloc//file",
    out = "libwit_bindgen_cabi_realloc0_0_0.a",
)

# We need to manually import this realloc library to compile Rust files generated by wit-bindgen.
# This likely patches a bug in the way rules_rust handles `build.rs` files
# with target-based conditionals:
# https://github.com/bytecodealliance/wit-bindgen/blob/v0.30.0/crates/guest-rust/rt/build.rs#L10.
cc_import(
    name = "wit-bindgen-cabi-realloc",
    static_library = ":libwit-bindgen-cabi-realloc",
    visibility = ["//visibility:public"],
)

# This file is also name-sensitive.
copy_file(
    name = "wasi-snapshot-preview1-reactor",
    src = "@wasi-snapshot-preview1-reactor//file",
    out = "wasi_snapshot_preview1.reactor.wasm",
)

filegroup(name = "empty")  # An empty file group.

# WASI C++ toolchain config:
# The compiler claims this is necessary,
# but AFAICT we can just use garbage values for every argument
# and everything will still work fine.

wasi_toolchain_config(name = "wasm32-wasip2-cc-toolchain-config")

cc_toolchain(
    name = "wasm32-wasip2-cc-toolchain",
    all_files = ":empty",
    compiler_files = ":empty",
    dwp_files = ":empty",
    linker_files = ":empty",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = False,
    toolchain_config = ":wasm32-wasip2-cc-toolchain-config",
)

toolchain(
    name = "wasm32-wasip2-toolchain",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_compatible_with = [
        "@platforms//cpu:wasm32",
        "@platforms//os:wasi",
    ],
    toolchain = ":wasm32-wasip2-cc-toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)
